{
  
    
        "post0": {
            "title": "Calculating molecular fingerprints using padelpy",
            "content": ". Hi friends, I&#39;ve just released a new YouTube video: How to build #machinelearning models for #drugdiscovery using #PaDELPyhttps://t.co/zGMcvaDdk1#66daysofdata #100daysofcode #bioinformatics #cheminformatics #qsar #qspr #python pic.twitter.com/B7vDy1eFfz . &mdash; Data Professor (@thedataprof) July 5, 2021 . Install padelpy . ! pip install padelpy . Collecting padelpy Downloading https://files.pythonhosted.org/packages/4d/40/57cd08bdbb1e6f2a7f25f7495fe3b4009ee453b401fe1ba457df92bf78c6/padelpy-0.1.9-py2.py3-none-any.whl (20.9MB) |████████████████████████████████| 20.9MB 1.4MB/s Installing collected packages: padelpy Successfully installed padelpy-0.1.9 . Prepare fingerprint XML . Download fingerprint XML files . ! wget https://github.com/dataprofessor/padel/raw/main/fingerprints_xml.zip ! unzip fingerprints_xml.zip . --2021-07-04 15:38:39-- https://github.com/dataprofessor/padel/raw/main/fingerprints_xml.zip Resolving github.com (github.com)... 140.82.113.4 Connecting to github.com (github.com)|140.82.113.4|:443... connected. HTTP request sent, awaiting response... 302 Found Location: https://raw.githubusercontent.com/dataprofessor/padel/main/fingerprints_xml.zip [following] --2021-07-04 15:38:39-- https://raw.githubusercontent.com/dataprofessor/padel/main/fingerprints_xml.zip Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.110.133, 185.199.109.133, ... Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 10871 (11K) [application/zip] Saving to: ‘fingerprints_xml.zip’ fingerprints_xml.zi 100%[===================&gt;] 10.62K --.-KB/s in 0s 2021-07-04 15:38:39 (105 MB/s) - ‘fingerprints_xml.zip’ saved [10871/10871] Archive: fingerprints_xml.zip inflating: AtomPairs2DFingerprintCount.xml inflating: AtomPairs2DFingerprinter.xml inflating: EStateFingerprinter.xml inflating: ExtendedFingerprinter.xml inflating: Fingerprinter.xml inflating: GraphOnlyFingerprinter.xml inflating: KlekotaRothFingerprintCount.xml inflating: KlekotaRothFingerprinter.xml inflating: MACCSFingerprinter.xml inflating: PubchemFingerprinter.xml inflating: SubstructureFingerprintCount.xml inflating: SubstructureFingerprinter.xml . List and sort fingerprint XML files . import glob xml_files = glob.glob(&quot;*.xml&quot;) xml_files.sort() xml_files . [&#39;AtomPairs2DFingerprintCount.xml&#39;, &#39;AtomPairs2DFingerprinter.xml&#39;, &#39;EStateFingerprinter.xml&#39;, &#39;ExtendedFingerprinter.xml&#39;, &#39;Fingerprinter.xml&#39;, &#39;GraphOnlyFingerprinter.xml&#39;, &#39;KlekotaRothFingerprintCount.xml&#39;, &#39;KlekotaRothFingerprinter.xml&#39;, &#39;MACCSFingerprinter.xml&#39;, &#39;PubchemFingerprinter.xml&#39;, &#39;SubstructureFingerprintCount.xml&#39;, &#39;SubstructureFingerprinter.xml&#39;] . FP_list = [&#39;AtomPairs2DCount&#39;, &#39;AtomPairs2D&#39;, &#39;EState&#39;, &#39;CDKextended&#39;, &#39;CDK&#39;, &#39;CDKgraphonly&#39;, &#39;KlekotaRothCount&#39;, &#39;KlekotaRoth&#39;, &#39;MACCS&#39;, &#39;PubChem&#39;, &#39;SubstructureCount&#39;, &#39;Substructure&#39;] . Create a dictionary . fp = dict(zip(FP_list, xml_files)) fp . {&#39;AtomPairs2D&#39;: &#39;AtomPairs2DFingerprinter.xml&#39;, &#39;AtomPairs2DCount&#39;: &#39;AtomPairs2DFingerprintCount.xml&#39;, &#39;CDK&#39;: &#39;Fingerprinter.xml&#39;, &#39;CDKextended&#39;: &#39;ExtendedFingerprinter.xml&#39;, &#39;CDKgraphonly&#39;: &#39;GraphOnlyFingerprinter.xml&#39;, &#39;EState&#39;: &#39;EStateFingerprinter.xml&#39;, &#39;KlekotaRoth&#39;: &#39;KlekotaRothFingerprinter.xml&#39;, &#39;KlekotaRothCount&#39;: &#39;KlekotaRothFingerprintCount.xml&#39;, &#39;MACCS&#39;: &#39;MACCSFingerprinter.xml&#39;, &#39;PubChem&#39;: &#39;PubchemFingerprinter.xml&#39;, &#39;Substructure&#39;: &#39;SubstructureFingerprinter.xml&#39;, &#39;SubstructureCount&#39;: &#39;SubstructureFingerprintCount.xml&#39;} . fp[&#39;AtomPairs2D&#39;] . &#39;AtomPairs2DFingerprinter.xml&#39; . Load HCV dataset . import pandas as pd df = pd.read_csv(&#39;https://raw.githubusercontent.com/dataprofessor/data/master/HCV_NS5B_Curated.csv&#39;) df.head(2) . CMPD_CHEMBLID CANONICAL_SMILES STANDARD_TYPE RELATION STANDARD_VALUE STANDARD_UNITS pIC50 PROTEIN_ACCESSION PREF_NAME DOC_CHEMBLID ASSAY_SRC_DESCRIPTION DESCRIPTION PUBMED_ID JOURNAL YEAR VOLUME ISSUE FIRST_PAGE MOLWEIGHT ALOGP PSA NUM_RO5_VIOLATIONS Activity . 0 CHEMBL179256 | OC(=O)c1ccc2c(c1)nc(c3ccc(O)cc3F)n2C4CCCCC4 | IC50 | = | 1.4 | nM | 8.853872 | Q8JXU8 | Hepatitis C virus NS5B RNA-dependent RNA polym... | CHEMBL1142688 | Scientific Literature | Inhibitory concentration against RNA dependent... | 15743173.0 | J. Med. Chem. | 2005 | 48.0 | 5.0 | 1314.0 | 354.37 | 4.93 | 75.35 | 0 | Active | . 1 CHEMBL204350 | CC(C)(C)CCN1[C@H](C(=C(C1=O)C2=NS(=O)(=O)c3ccc... | IC50 | = | 1.7 | nM | 8.769551 | Q8JXU8 | Hepatitis C virus NS5B RNA-dependent RNA polym... | CHEMBL1146957 | Scientific Literature | Inhibition of HCV NS5B RNA dependent RNA polym... | 16455253.0 | Bioorg. Med. Chem. Lett. | 2006 | 16.0 | 8.0 | 2205.0 | 419.54 | 2.37 | 107.45 | 0 | Active | . df.tail(2) . CMPD_CHEMBLID CANONICAL_SMILES STANDARD_TYPE RELATION STANDARD_VALUE STANDARD_UNITS pIC50 PROTEIN_ACCESSION PREF_NAME DOC_CHEMBLID ASSAY_SRC_DESCRIPTION DESCRIPTION PUBMED_ID JOURNAL YEAR VOLUME ISSUE FIRST_PAGE MOLWEIGHT ALOGP PSA NUM_RO5_VIOLATIONS Activity . 576 CHEMBL175454 | OC(=O)c1ccc2c(c1)nc(c3ccccn3)n2c4ccccc4 | IC50 | = | 360000.0 | nM | 3.443697 | Q8JXU8 | Hepatitis C virus NS5B RNA-dependent RNA polym... | CHEMBL1149223 | Scientific Literature | Inhibitory activity against NS5B polymerase of... | 14684311.0 | Bioorg. Med. Chem. Lett. | 2004 | 14.0 | 1.0 | 119.0 | 315.33 | 3.96 | 68.01 | 0 | Inactive | . 577 CHEMBL369640 | CC(C)n1c(nc2cc(ccc12)C(=O)O)c3ccccn3 | IC50 | = | 408000.0 | nM | 3.389340 | Q8JXU8 | Hepatitis C virus NS5B RNA-dependent RNA polym... | CHEMBL1149223 | Scientific Literature | Inhibitory activity against NS5B polymerase of... | 14684311.0 | Bioorg. Med. Chem. Lett. | 2004 | 14.0 | 1.0 | 119.0 | 281.31 | 3.11 | 68.01 | 0 | Inactive | . Prepare data subset as input to PaDEL . df2 = pd.concat( [df[&#39;CANONICAL_SMILES&#39;],df[&#39;CMPD_CHEMBLID&#39;]], axis=1 ) df2.to_csv(&#39;molecule.smi&#39;, sep=&#39; t&#39;, index=False, header=False) df2 . CANONICAL_SMILES CMPD_CHEMBLID . 0 OC(=O)c1ccc2c(c1)nc(c3ccc(O)cc3F)n2C4CCCCC4 | CHEMBL179256 | . 1 CC(C)(C)CCN1[C@H](C(=C(C1=O)C2=NS(=O)(=O)c3ccc... | CHEMBL204350 | . 2 OC(=O)c1ccc2c(c1)nc(c3ccc(O)cc3)n2C4CCCCC4 | CHEMBL179257 | . 3 OC(=O)c1ccc2c(C3CCCCC3)c([nH]c2c1)c4ccc(O)cc4 | CHEMBL178784 | . 4 CN(C)C(=O)Cn1c(c2ccc(OCc3ccccc3)cc2)c(C4CCCCC4... | CHEMBL369319 | . ... ... | ... | . 573 CCC(CC)n1c(nc2cc(ccc12)C(=O)O)c3ccccn3 | CHEMBL175762 | . 574 Cc1sc(cc1 C(=C C(=O)C(=O)O) O)c2ccccc2 | CHEMBL197882 | . 575 OC(=O)c1ccc2c(c1)ncn2C3CCCCC3 | CHEMBL177122 | . 576 OC(=O)c1ccc2c(c1)nc(c3ccccn3)n2c4ccccc4 | CHEMBL175454 | . 577 CC(C)n1c(nc2cc(ccc12)C(=O)O)c3ccccn3 | CHEMBL369640 | . 578 rows × 2 columns . Calculate descriptors . There are 12 fingerprint types in PaDEL. To calculate all 12, make sure to make adjustments to the descriptortypes input argument to any of the ones in the fp dictionary variable as shown above, e.g. SubstructureFingerprintCount.xml . fp . {&#39;AtomPairs2D&#39;: &#39;AtomPairs2DFingerprinter.xml&#39;, &#39;AtomPairs2DCount&#39;: &#39;AtomPairs2DFingerprintCount.xml&#39;, &#39;CDK&#39;: &#39;Fingerprinter.xml&#39;, &#39;CDKextended&#39;: &#39;ExtendedFingerprinter.xml&#39;, &#39;CDKgraphonly&#39;: &#39;GraphOnlyFingerprinter.xml&#39;, &#39;EState&#39;: &#39;EStateFingerprinter.xml&#39;, &#39;KlekotaRoth&#39;: &#39;KlekotaRothFingerprinter.xml&#39;, &#39;KlekotaRothCount&#39;: &#39;KlekotaRothFingerprintCount.xml&#39;, &#39;MACCS&#39;: &#39;MACCSFingerprinter.xml&#39;, &#39;PubChem&#39;: &#39;PubchemFingerprinter.xml&#39;, &#39;Substructure&#39;: &#39;SubstructureFingerprinter.xml&#39;, &#39;SubstructureCount&#39;: &#39;SubstructureFingerprintCount.xml&#39;} . fp[&#39;PubChem&#39;] . &#39;PubchemFingerprinter.xml&#39; . from padelpy import padeldescriptor fingerprint = &#39;Substructure&#39; fingerprint_output_file = &#39;&#39;.join([fingerprint,&#39;.csv&#39;]) #Substructure.csv fingerprint_descriptortypes = fp[fingerprint] padeldescriptor(mol_dir=&#39;molecule.smi&#39;, d_file=fingerprint_output_file, #&#39;Substructure.csv&#39; #descriptortypes=&#39;SubstructureFingerprint.xml&#39;, descriptortypes= fingerprint_descriptortypes, detectaromaticity=True, standardizenitro=True, standardizetautomers=True, threads=2, removesalt=True, log=True, fingerprints=True) . Display calculated fingerprints . descriptors = pd.read_csv(fingerprint_output_file) descriptors . Name SubFP1 SubFP2 SubFP3 SubFP4 SubFP5 SubFP6 SubFP7 SubFP8 SubFP9 SubFP10 SubFP11 SubFP12 SubFP13 SubFP14 SubFP15 SubFP16 SubFP17 SubFP18 SubFP19 SubFP20 SubFP21 SubFP22 SubFP23 SubFP24 SubFP25 SubFP26 SubFP27 SubFP28 SubFP29 SubFP30 SubFP31 SubFP32 SubFP33 SubFP34 SubFP35 SubFP36 SubFP37 SubFP38 SubFP39 ... SubFP268 SubFP269 SubFP270 SubFP271 SubFP272 SubFP273 SubFP274 SubFP275 SubFP276 SubFP277 SubFP278 SubFP279 SubFP280 SubFP281 SubFP282 SubFP283 SubFP284 SubFP285 SubFP286 SubFP287 SubFP288 SubFP289 SubFP290 SubFP291 SubFP292 SubFP293 SubFP294 SubFP295 SubFP296 SubFP297 SubFP298 SubFP299 SubFP300 SubFP301 SubFP302 SubFP303 SubFP304 SubFP305 SubFP306 SubFP307 . 0 CHEMBL204350 | 1 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 1 | 0 | 0 | 0 | 1 | . 1 CHEMBL179256 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 2 CHEMBL179257 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 3 CHEMBL178784 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 4 CHEMBL369319 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 573 CHEMBL178067 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 574 CHEMBL197882 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 575 CHEMBL177122 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 576 CHEMBL175454 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 577 CHEMBL369640 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | . 578 rows × 308 columns . Build a Random Forest Model . X = descriptors.drop(&#39;Name&#39;, axis=1) y = df[&#39;Activity&#39;] . Remove low variance features . from sklearn.feature_selection import VarianceThreshold def remove_low_variance(input_data, threshold=0.1): selection = VarianceThreshold(threshold) selection.fit(input_data) return input_data[input_data.columns[selection.get_support(indices=True)]] X = remove_low_variance(X, threshold=0.1) X . SubFP1 SubFP2 SubFP3 SubFP18 SubFP49 SubFP84 SubFP101 SubFP109 SubFP135 SubFP137 SubFP171 SubFP172 SubFP180 SubFP181 SubFP183 SubFP184 SubFP214 SubFP275 . 0 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | . 1 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 | 1 | 0 | 1 | . 2 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | . 3 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | . 4 0 | 1 | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 573 1 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | . 574 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 1 | . 575 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | . 576 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | . 577 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | . 578 rows × 18 columns . Data splitting . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) . X_train.shape, X_test.shape . ((462, 18), (116, 18)) . Model building . from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import matthews_corrcoef model = RandomForestClassifier(n_estimators=500, random_state=42) model.fit(X_train, y_train) . RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=500, n_jobs=None, oob_score=False, random_state=42, verbose=0, warm_start=False) . Apply model to make prediction . y_train_pred = model.predict(X_train) y_test_pred = model.predict(X_test) . Calculate model performance metrics . mcc_train = matthews_corrcoef(y_train, y_train_pred) mcc_train . 0.8328828266116973 . mcc_test = matthews_corrcoef(y_test, y_test_pred) mcc_test . 0.5219385334290642 . Cross-validation . from sklearn.model_selection import cross_val_score rf = RandomForestClassifier(n_estimators=500, random_state=42) cv_scores = cross_val_score(rf, X_train, y_train, cv=5) cv_scores . array([0.86021505, 0.86021505, 0.88043478, 0.83695652, 0.79347826]) . mcc_cv = cv_scores.mean() mcc_cv . 0.8462599345488545 . model_name = pd.Series([&#39;Random forest&#39;], name=&#39;Name&#39;) mcc_train_series = pd.Series(mcc_train, name=&#39;MCC_train&#39;) mcc_cv_series = pd.Series(mcc_cv, name=&#39;MCC_cv&#39;) mcc_test_series = pd.Series(mcc_test, name=&#39;MCC_test&#39;) performance_metrics = pd.concat([model_name, mcc_train_series, mcc_cv_series, mcc_test_series], axis=1) performance_metrics . Name MCC_train MCC_cv MCC_test . 0 Random forest | 0.832883 | 0.84626 | 0.521939 | .",
            "url": "https://dataprofessor.github.io/ds/bioinformatics/cheminformatics/padelpy/scikit-learn/2021/07/06/_07_06_padelpy.html",
            "relUrl": "/bioinformatics/cheminformatics/padelpy/scikit-learn/2021/07/06/_07_06_padelpy.html",
            "date": " • Jul 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dataprofessor.github.io/ds/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dataprofessor.github.io/ds/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Chanin runs the YouTube channel Data Professor 1. . An educational YouTube channel about data science and bioinformatics. &#8617; . |",
          "url": "https://dataprofessor.github.io/ds/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dataprofessor.github.io/ds/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}